/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "wrapper.go"

struct node_info {
    char* Name;
    char* Version;
    char* Addr;
    int State;
    char* ConnState;
    long long OnlineTs;
    long long OfflineTs;
    long long ActiveTs;
    long long BrainTs;
};

struct brain_info {
    char* Name;
    char* Version;
    char* Addr;
};

struct node_status {
    char* Name;
    char* Platform;
    int CpuCores;
    long long LocalTime;
    double CpuLoadShort;
    double CpuLoadLong;
    long long MemUsed;
    long long MemTotal;
    long long DiskUsed;
    long long DiskTotal;
};

struct execution_result {
    char* Name;
    int Code;
    char* CommunicationErrorMsg;
    char* ProcessErrorMsg;
    char* Result;
};

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef __SIZE_TYPE__ GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern char* Init(GoString configFile);
extern char* NodeInfo(GoString name, struct node_info* result);
extern char* NodesInfo(GoSlice names, struct brain_info* brain, GoSlice results, int* size);
extern char* NodeStatus(GoString name, struct node_status* result);
extern char* NodesStatus(GoSlice names, GoSlice results, int* size);
extern char* DistribFile(GoString localFileOrDir, GoString targetPath, GoSlice names, GoSlice results, int* size);
extern char* PullFile(GoString pathtype, GoString node, GoString fileOrDir, GoString targetdir, struct execution_result* result);
extern char* Run(GoString runtask, GoSlice names, GoSlice results, int* size);
extern char* XRun(GoString runtask, GoSlice names, GoInt delay, GoSlice results, int* size);
extern char* GroupGetAll(GoSlice results, int* size);
extern char* GroupGet(GoString name, GoSlice results, int* size);
extern char* GroupSet(GoString name, GoUint8 nocheck, GoSlice names);
extern char* GroupDel(GoString name);

#ifdef __cplusplus
}
#endif
